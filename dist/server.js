"use strict";var __awaiter=this&&this.__awaiter||function(e,r,t,i){return new(t||(t=Promise))(function(s,o){function n(e){try{h(i.next(e))}catch(e){o(e)}}function a(e){try{h(i.throw(e))}catch(e){o(e)}}function h(e){var r;e.done?s(e.value):(r=e.value,r instanceof t?r:new t(function(e){e(r)})).then(n,a)}h((i=i.apply(e,r||[])).next())})},__importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0});const fs_1=__importDefault(require("fs")),normalizr_1=require("normalizr"),util_1=require("util"),app_1=__importDefault(require("./app")),errorHandler_1=__importDefault(require("./errors/errorHandler")),DataSchema_1=require("./Models/DataSchema");class Server{constructor(e,r,t=!1){this.readFileAsync=util_1.promisify(fs_1.default.readFile),this.run=(()=>__awaiter(this,void 0,void 0,function*(){this.watchConfigForChanges(this.configFilePath),yield this.readAndStart()})),this.stopServer=(e=>this.app?this.app.stop(r=>{r?console.error(r):e&&e()}):(console.error("[server] No server to stop, weird!"),Promise.resolve(!0))),this.stopServerSync=(e=>this.app?this.app.stopSync(r=>{r?console.error(r):e&&e()}):(console.error("[server] No server to stop, weird!"),Promise.resolve(!0))),this.switchConfig=(e=>{this.app.switchConfig(this.parseConfig(e))}),this.watchConfigForChanges=(e=>{fs_1.default.watchFile(e,()=>{console.log("-----------------------------------------"),console.log(e+" changed"),this.readAndStart()})}),this.parseConfig=(e=>{return normalizr_1.normalize(e,DataSchema_1.ConfigSchema)}),this.readAndStart=(()=>this.readFile(this.configFilePath).then(e=>{const r=this.parseConfig(e);this.restartServer(r)}).catch(e=>{this.errorHandler.checkErrorAndStopProcess(e),this.stopServer()})),this.restartServer=(e=>{this.app.isListening()?this.stopServer(()=>this._startServer(e)):this._startServer(e)}),this._startServer=(e=>{this.app.setupServer(e),this.app.start(e=>e?console.error(e):console.log("server is listening"))});const i="test"===process.env.NODE_ENV;this.errorHandler=new errorHandler_1.default(r),this.app=new app_1.default(this.errorHandler,!i&&t),this.configFilePath=e||(i?"./testmocker.json":"./apimocker.json"),console.log("Reading config file from: "+this.configFilePath)}readFile(e){return __awaiter(this,void 0,void 0,function*(){const r=yield this.readFileAsync(e,{encoding:"utf-8"}),t=JSON.parse(r),i=[];if(t.importedConfigurations){for(const e of t.importedConfigurations){const r=yield this.readFileAsync(e.path,{encoding:"utf-8"}),t=JSON.parse(r);i.push(...t.projects)}t&&t.projects&&t.projects.push(...i)}return t})}}exports.default=Server;